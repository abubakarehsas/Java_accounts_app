/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.net.URL;
import java.util.List;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import services.ProductServices;

/**
 *
 * @author ehsas
 */
public class AddProductForm extends javax.swing.JInternalFrame {

    private ProductServices productServices;
//    private CommonServices commonServices;

    String subCatId = "";

    String name;
    String model;
    String quantity;
    String code;
    String sku;
    String parchasePrice;
    String salePrice;
    String description;
    String catId;

    
    boolean myStatus1 = false;
    boolean myStatus2 = false;
    boolean myStatus3 = false;
    boolean myStatus4 = false;
    boolean myStatus5 = false;
    boolean myStatus6 = false;
    boolean myStatus7 = false;
    boolean myStatus8 = false;

    public AddProductForm() {
        initComponents();

//        commonServices = new CommonServices();
        productServices = new ProductServices();

//        List<Category> vectorCategories = commonServices.getCategories();
//        DefaultComboBoxModel model;
//        model = new DefaultComboBoxModel((Vector) vectorCategories);
//        cmbCategory.setModel(model);
        


//        String catId = category.getCategoryId();

//        Vector<SubCategory> vectorSubCategories = commonServices.getSubCategories(catId);
//        DefaultComboBoxModel modelSubCategories = new DefaultComboBoxModel(vectorSubCategories);
//        cmbSubCategory.setModel(modelSubCategories);
        ///////////////////////////////////////////////

        this.getContentPane().setBackground(Color.WHITE);
        setBorder(BorderFactory.createLineBorder(new Color(201, 201, 201)));
        javax.swing.plaf.InternalFrameUI ifu = this.getUI();
        ((javax.swing.plaf.basic.BasicInternalFrameUI) ifu).setNorthPane(null);

        cmbCategory.setRenderer(new DefaultListCellRenderer() {
            @Override
            public void paint(Graphics g) {
                setBackground(Color.WHITE);
                setForeground(new Color(164, 164, 164));
                super.paint(g);
            }
        });

        cmbSubCategory.setRenderer(new DefaultListCellRenderer() {
            @Override
            public void paint(Graphics g) {
                setBackground(Color.WHITE);
                setForeground(new Color(164, 164, 164));
                super.paint(g);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSpinner1 = new javax.swing.JSpinner();
        jPanel1 = new javax.swing.JPanel();
        cmbSubCategory = new javax.swing.JComboBox<String>();
        txtSku = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDesc = new javax.swing.JTextArea();
        cmbCategory = new javax.swing.JComboBox<String>();
        txtCode = new javax.swing.JTextField();
        txtProductName = new javax.swing.JTextField();
        txtProductModel = new javax.swing.JTextField();
        btnSaveProduct = new javax.swing.JButton();
        txtSalePrice = new javax.swing.JFormattedTextField();
        txtQuantity = new javax.swing.JFormattedTextField();
        txtParchasePrice = new javax.swing.JFormattedTextField();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        cmbSubCategory.setEditable(true);
        cmbSubCategory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbSubCategory.setForeground(new java.awt.Color(204, 204, 204));
        cmbSubCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sub category" }));
        cmbSubCategory.setFocusable(false);
        cmbSubCategory.setOpaque(false);

        txtSku.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSku.setForeground(new java.awt.Color(204, 204, 204));
        txtSku.setText("Product SKU");
        txtSku.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSkuFocusLost(evt);
            }
        });
        txtSku.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSkuMouseClicked(evt);
            }
        });
        txtSku.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSkuKeyTyped(evt);
            }
        });

        txtDesc.setColumns(20);
        txtDesc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDesc.setForeground(new java.awt.Color(204, 204, 204));
        txtDesc.setRows(5);
        txtDesc.setText("Product description");
        txtDesc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescFocusLost(evt);
            }
        });
        txtDesc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDescMouseClicked(evt);
            }
        });
        txtDesc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(txtDesc);

        cmbCategory.setEditable(true);
        cmbCategory.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbCategory.setForeground(new java.awt.Color(204, 204, 204));
        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Category" }));
        cmbCategory.setBorder(null);
        cmbCategory.setFocusable(false);
        cmbCategory.setOpaque(false);
        cmbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryActionPerformed(evt);
            }
        });

        txtCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtCode.setForeground(new java.awt.Color(204, 204, 204));
        txtCode.setText("Product code");
        txtCode.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodeFocusLost(evt);
            }
        });
        txtCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCodeMouseClicked(evt);
            }
        });
        txtCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodeKeyTyped(evt);
            }
        });

        txtProductName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtProductName.setForeground(new java.awt.Color(204, 204, 204));
        txtProductName.setText("Product Name");
        txtProductName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtProductNameFocusLost(evt);
            }
        });
        txtProductName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtProductNameMouseClicked(evt);
            }
        });
        txtProductName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProductNameKeyTyped(evt);
            }
        });

        txtProductModel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtProductModel.setForeground(new java.awt.Color(204, 204, 204));
        txtProductModel.setText("Product Model");
        txtProductModel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtProductModelFocusLost(evt);
            }
        });
        txtProductModel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtProductModelMouseClicked(evt);
            }
        });
        txtProductModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductModelActionPerformed(evt);
            }
        });
        txtProductModel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtProductModelKeyTyped(evt);
            }
        });

        btnSaveProduct.setBackground(new java.awt.Color(153, 0, 0));
        btnSaveProduct.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSaveProduct.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveProduct.setText("Save");
        btnSaveProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProductActionPerformed(evt);
            }
        });
        btnSaveProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSaveProductKeyPressed(evt);
            }
        });

        txtSalePrice.setForeground(new java.awt.Color(204, 204, 204));
        txtSalePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#########"))));
        txtSalePrice.setText("Sale price");
        txtSalePrice.setCaretColor(new java.awt.Color(204, 204, 204));
        txtSalePrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSalePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSalePriceFocusLost(evt);
            }
        });
        txtSalePrice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSalePriceMouseClicked(evt);
            }
        });
        txtSalePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalePriceActionPerformed(evt);
            }
        });
        txtSalePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalePriceKeyTyped(evt);
            }
        });

        txtQuantity.setForeground(new java.awt.Color(204, 204, 204));
        txtQuantity.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txtQuantity.setText("Product quantity");
        txtQuantity.setCaretColor(new java.awt.Color(204, 204, 204));
        txtQuantity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtQuantity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQuantityFocusLost(evt);
            }
        });
        txtQuantity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtQuantityMouseClicked(evt);
            }
        });
        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtQuantityKeyTyped(evt);
            }
        });

        txtParchasePrice.setForeground(new java.awt.Color(204, 204, 204));
        txtParchasePrice.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("##########"))));
        txtParchasePrice.setText("Parchased price");
        txtParchasePrice.setCaretColor(new java.awt.Color(204, 204, 204));
        txtParchasePrice.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtParchasePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtParchasePriceFocusLost(evt);
            }
        });
        txtParchasePrice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtParchasePriceMouseClicked(evt);
            }
        });
        txtParchasePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtParchasePriceKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(420, 420, 420)
                        .addComponent(btnSaveProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtSku)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtParchasePrice)
                                .addGap(10, 10, 10)
                                .addComponent(txtSalePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(txtProductModel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProductModel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtParchasePrice, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addComponent(txtSku)
                    .addComponent(txtSalePrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = -2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(98, 73, 110, 63);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtProductNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtProductNameMouseClicked

    }//GEN-LAST:event_txtProductNameMouseClicked

    private void btnSaveProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProductActionPerformed

        subCatId = "";

        name = txtProductName.getText();
        model = txtProductModel.getText();
        quantity = txtQuantity.getText();
        code = txtCode.getText();
        sku = txtSku.getText();
        parchasePrice = txtParchasePrice.getText();
        salePrice = txtSalePrice.getText();
        description = txtDesc.getText();

//        try {
//            c = (Category) cmbCategory.getSelectedItem();
//            sc = (SubCategory) cmbSubCategory.getSelectedItem();
//        } catch (Exception e) {
//            //JOptionPane.showMessageDialog(rootPane, "Please Select Sub Category");
//        }
//
//        if (cmbSubCategory.getSelectedItem().equals("Sub category") || cmbSubCategory.getSelectedItem().equals("")) {
//            subCatId = "0";
//        } else {
//            subCatId = sc.getSubCategoryId().toString();
//        }
//        catId = c.getCategoryId();

        if (name.equals("") || model.equals("") || quantity.equals("") || code.equals("")
                || sku.equals("") || parchasePrice.equals("") || salePrice.equals("")
                || description.equals("") || name.equals("Product Name") || model.equals("Product Model")
                || code.equals("Product code") || sku.equals("Product SKU")
                || description.equals("Product description") || quantity.equals("Product quantity")) {

            JOptionPane.showMessageDialog(txtCode, "Please enter Product detail");
        } else {

            URL url = getClass().getResource("rolling.gif");
            ImageIcon icon = new ImageIcon(url);
            JLabel lblAnimation = new JLabel(icon);
            JLabel lblWait = new JLabel();
            lblWait.setText("Please wait,Adding product detail ...........");
            lblWait.setFont(new Font("Tahoma", Font.PLAIN, 14));
            lblWait.setForeground(new Color(191, 39, 38));
            JPanel panel1;
            panel1 = new JPanel(new BorderLayout(5, 5));
            panel1.setBackground(Color.WHITE);
            panel1.add(lblWait, BorderLayout.PAGE_START);
            panel1.add(lblAnimation, BorderLayout.CENTER);

            panel1.setBorder(BorderFactory.createEmptyBorder(11, 11, 11, 11));

            final JDialog dialog = new JDialog();
            dialog.getContentPane().add(panel1);
            dialog.setResizable(false);
            dialog.pack();
            dialog.setSize(500, 180);
            dialog.setLocationRelativeTo(null);
            dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
            dialog.setAlwaysOnTop(false);
            dialog.setVisible(true);

            SwingWorker worker = new SwingWorker() {

                @Override
                protected void done() {
                    // Close the dialog
                    dialog.dispose();
                }

                @Override
                protected void process(List chunks) {

                }

                @Override
                protected Object doInBackground() throws Exception {

                    boolean status = productServices.addProductDetail(name, catId, subCatId, model, quantity, code, sku, parchasePrice, salePrice, description);

                    

                    return null;

                }
            };

            worker.execute();
        }
    }//GEN-LAST:event_btnSaveProductActionPerformed

   
    private void txtCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCodeMouseClicked
        
    }//GEN-LAST:event_txtCodeMouseClicked

    private void txtSkuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSkuMouseClicked
        

    }//GEN-LAST:event_txtSkuMouseClicked

    private void txtProductModelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtProductModelMouseClicked
        
    }//GEN-LAST:event_txtProductModelMouseClicked

    private void txtProductModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductModelActionPerformed

    private void cmbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryActionPerformed
//        Category category = (Category) cmbCategory.getSelectedItem();
//
//        String catId = category.getCategoryId();
//
//        Vector<SubCategory> vectorSubCategories = commonServices.getSubCategories(catId);
//        DefaultComboBoxModel model = new DefaultComboBoxModel(vectorSubCategories);
//        cmbSubCategory.setModel(model);

    }//GEN-LAST:event_cmbCategoryActionPerformed

    private void txtQuantityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtQuantityMouseClicked
        
    }//GEN-LAST:event_txtQuantityMouseClicked

    private void txtParchasePriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtParchasePriceMouseClicked
        
    }//GEN-LAST:event_txtParchasePriceMouseClicked

    private void txtSalePriceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSalePriceMouseClicked
        
    }//GEN-LAST:event_txtSalePriceMouseClicked

    private void txtDescMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDescMouseClicked
        
    }//GEN-LAST:event_txtDescMouseClicked

    private void txtSalePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalePriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSalePriceActionPerformed

    private void txtProductNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductNameKeyTyped
        
        if (myStatus1 == false) {
                    txtProductName.setText("");
                    myStatus1 = true;
                } else {
                }
                
            txtProductName.setForeground(Color.BLACK);

    }//GEN-LAST:event_txtProductNameKeyTyped

    private void txtProductNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtProductNameFocusLost
       
            if (txtProductName.getText().equals("")) {
                    txtProductName.setText("Product Name");
                    txtProductName.setForeground(new Color(153, 153, 153));
                    myStatus1 = false;
                }
    }//GEN-LAST:event_txtProductNameFocusLost

    private void txtProductModelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtProductModelFocusLost
       
            if (txtProductModel.getText().equals("")) {
                    txtProductModel.setText("Product Model");
                    txtProductModel.setForeground(new Color(153, 153, 153));
                    myStatus2 = false;
                }
    }//GEN-LAST:event_txtProductModelFocusLost

    private void txtProductModelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtProductModelKeyTyped
       if (myStatus2 == false) {
                    txtProductModel.setText("");
                    myStatus2 = true;
                } else {
                }
                
            txtProductModel.setForeground(Color.BLACK);
    }//GEN-LAST:event_txtProductModelKeyTyped

    private void txtQuantityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyTyped
        if (myStatus3 == false) {
                    txtQuantity.setText("");
                    myStatus3 = true;
                } else {
                }
                
            txtQuantity.setForeground(Color.BLACK);
            
    }//GEN-LAST:event_txtQuantityKeyTyped

    private void txtQuantityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQuantityFocusLost
       
            if (txtQuantity.getText().equals("")) {
                    txtQuantity.setText("Product quantity");
                    txtQuantity.setForeground(new Color(153, 153, 153));
                    myStatus3 = false;
                }
    }//GEN-LAST:event_txtQuantityFocusLost

    private void txtCodeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodeFocusLost
       
            if (txtCode.getText().equals("")) {
                    txtCode.setText("Product code");
                    txtCode.setForeground(new Color(153, 153, 153));
                    myStatus4 = false;
                }
    }//GEN-LAST:event_txtCodeFocusLost

    private void txtCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodeKeyTyped
        if (myStatus4 == false) {
                    txtCode.setText("");
                    myStatus4 = true;
                } else {
                }
                
            txtCode.setForeground(Color.BLACK);
    }//GEN-LAST:event_txtCodeKeyTyped

    private void txtSkuKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSkuKeyTyped
       if (myStatus5 == false) {
                    txtSku.setText("");
                    myStatus5 = true;
                } else {
                }
                
            txtSku.setForeground(Color.BLACK);
         
    }//GEN-LAST:event_txtSkuKeyTyped

    private void txtSkuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSkuFocusLost
        
            if (txtSku.getText().equals("")) {
                    txtSku.setText("Product SKU");
                    txtSku.setForeground(new Color(153, 153, 153));
                    myStatus5 = false;
                }
    }//GEN-LAST:event_txtSkuFocusLost

    private void txtParchasePriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtParchasePriceKeyTyped
       
        if (myStatus6 == false) {
                    txtParchasePrice.setText("");
                    myStatus6 = true;
                } else {
                }
                
            txtParchasePrice.setForeground(Color.BLACK);
           
    }//GEN-LAST:event_txtParchasePriceKeyTyped

    private void txtParchasePriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtParchasePriceFocusLost
       
            if (txtParchasePrice.getText().equals("")) {
                    txtParchasePrice.setText("Parchased price");
                    txtParchasePrice.setForeground(new Color(153, 153, 153));
                    myStatus6 = false;
                }
    }//GEN-LAST:event_txtParchasePriceFocusLost

    private void txtSalePriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalePriceKeyTyped
       
        if (myStatus7 == false) {
                    txtSalePrice.setText("");
                    myStatus7 = true;
                } else {
                }
                
            txtSalePrice.setForeground(Color.BLACK);
            
    }//GEN-LAST:event_txtSalePriceKeyTyped

    private void txtSalePriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSalePriceFocusLost
        
            if (txtSalePrice.getText().equals("")) {
                    txtSalePrice.setText("Sale price");
                    txtSalePrice.setForeground(new Color(153, 153, 153));
                    myStatus7 = false;
                }
    }//GEN-LAST:event_txtSalePriceFocusLost

    private void txtDescKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescKeyTyped
        
        if (myStatus8 == false) {
                    txtDesc.setText("");
                    myStatus8 = true;
                } else {
                }
                
            txtDesc.setForeground(Color.BLACK);
            
    }//GEN-LAST:event_txtDescKeyTyped

    private void txtDescFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescFocusLost
     
            if (txtDesc.getText().equals("")) {
                    txtDesc.setText("Product description");
                    txtDesc.setForeground(new Color(153, 153, 153));
                    myStatus8 = false;
                }
    }//GEN-LAST:event_txtDescFocusLost

    private void btnSaveProductKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSaveProductKeyPressed
       
        subCatId = "";

        name = txtProductName.getText();
        model = txtProductModel.getText();
        quantity = txtQuantity.getText();
        code = txtCode.getText();
        sku = txtSku.getText();
        parchasePrice = txtParchasePrice.getText();
        salePrice = txtSalePrice.getText();
        description = txtDesc.getText();

//        try {
//            c = (Category) cmbCategory.getSelectedItem();
//            sc = (SubCategory) cmbSubCategory.getSelectedItem();
//        } catch (Exception e) {
//            //JOptionPane.showMessageDialog(rootPane, "Please Select Sub Category");
//        }
//
//        if (cmbSubCategory.getSelectedItem().equals("Sub category") || cmbSubCategory.getSelectedItem().equals("")) {
//            subCatId = "0";
//        } else {
//            subCatId = sc.getSubCategoryId().toString();
//        }
//        catId = c.getCategoryId();

        if (name.equals("") || model.equals("") || quantity.equals("") || code.equals("")
                || sku.equals("") || parchasePrice.equals("") || salePrice.equals("")
                || description.equals("") || name.equals("Product Name") || model.equals("Product Model")
                || code.equals("Product code") || sku.equals("Product SKU")
                || description.equals("Product description") || quantity.equals("Product quantity")) {

            JOptionPane.showMessageDialog(txtCode, "Please enter Product detail");
        } else {

            URL url = getClass().getResource("rolling.gif");
            ImageIcon icon = new ImageIcon(url);
            JLabel lblAnimation = new JLabel(icon);
            JLabel lblWait = new JLabel();
            lblWait.setText("Please wait,Adding product detail ...........");
            lblWait.setFont(new Font("Tahoma", Font.PLAIN, 14));
            lblWait.setForeground(new Color(191, 39, 38));
            JPanel panel1;
            panel1 = new JPanel(new BorderLayout(5, 5));
            panel1.setBackground(Color.WHITE);
            panel1.add(lblWait, BorderLayout.PAGE_START);
            panel1.add(lblAnimation, BorderLayout.CENTER);

            panel1.setBorder(BorderFactory.createEmptyBorder(11, 11, 11, 11));

            final JDialog dialog = new JDialog();
            dialog.getContentPane().add(panel1);
            dialog.setResizable(false);
            dialog.pack();
            dialog.setSize(500, 180);
            dialog.setLocationRelativeTo(null);
            dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
            dialog.setAlwaysOnTop(false);
            dialog.setVisible(true);

            SwingWorker worker = new SwingWorker() {

                @Override
                protected void done() {
                    // Close the dialog
                    dialog.dispose();
                }

                @Override
                protected void process(List chunks) {

                }

                @Override
                protected Object doInBackground() throws Exception {

                    boolean status = productServices.addProductDetail(name, catId, subCatId, model, quantity, code, sku, parchasePrice, salePrice, description);

                

                    return null;

                }
            };

            worker.execute();
        }
    }//GEN-LAST:event_btnSaveProductKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSaveProduct;
    private javax.swing.JComboBox<String> cmbCategory;
    private javax.swing.JComboBox<String> cmbSubCategory;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextArea txtDesc;
    private javax.swing.JFormattedTextField txtParchasePrice;
    private javax.swing.JTextField txtProductModel;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JFormattedTextField txtQuantity;
    private javax.swing.JFormattedTextField txtSalePrice;
    private javax.swing.JTextField txtSku;
    // End of variables declaration//GEN-END:variables
}
